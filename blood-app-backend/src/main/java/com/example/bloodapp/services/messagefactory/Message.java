package com.example.bloodapp.services.messagefactory;

import com.example.bloodapp.domain.entity.Appointment;
import com.example.bloodapp.domain.entity.MessageType;
import com.example.bloodapp.domain.entity.ReasonType;

//Prototype Design Pattern
//This is the concretePrototype which implement Clonable that have already clone() method
public class Message implements Cloneable{
    private String subject;
    private String text;
    private String destination;
    private ReasonType reasonType;

    public Message(ReasonType reasonType) {
        if(reasonType.equals(ReasonType.CONFIRMATION)){
            this.subject = "Appointment Confirmation";
        }
        if(reasonType.equals(ReasonType.REMINDER)){
            this.subject = "Appointment Reminder";
        }
        this.reasonType = reasonType;
        StringBuilder stringBuilder  = new StringBuilder();
        this.text = stringBuilder
                .append("Hello,{name}!\n\n")
                .append("This is autogenerated message {reason} ")
                .append("your scheduled appointment at {location}, on {date}.\n\n")
                .append("Blood Donation Company â˜º")
                .toString();
    }

    public String getSubject() {
        return subject;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public ReasonType getReasonType() {
        return reasonType;
    }

    public void setReasonType(ReasonType reasonType) {
        this.reasonType = reasonType;
    }

    public String getDestination() {
        return destination;
    }

    public void setDestination(String destination) {
        this.destination = destination;
    }

    public void addMessageInformation(Appointment appointment){
        text = text.replace("{name}",appointment.getDonor().getName() + " " + appointment.getDonor().getSurname());
        if(reasonType.equals(ReasonType.CONFIRMATION)){
            text = text.replace("{reason}", "confirming");
        }
        if(reasonType.equals(ReasonType.REMINDER)){
            text = text.replace("{reason}", "reminding you about");
        }
        text = text.replace("{location}",
                appointment.getLocation().getName() + ", " + appointment.getLocation().getAddress());
        text = text.replace("{date}", appointment.getAppoinmentDate().toString());
        if(appointment.getMessageType().equals(MessageType.EMAIL)){
            this.destination = appointment.getDonor().getEmail();
        }else{
            this.destination = appointment.getDonor().getPhoneNumber();
        }
    }

    @Override
    public Message clone() {
        Message message = null;
        try{
            message =  (Message)super.clone();
        }catch (CloneNotSupportedException exception ){
            exception.printStackTrace();
        }
        return message;
    }

}
